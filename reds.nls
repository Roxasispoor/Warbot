;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe rouge basique
;; préfixe : red-team
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;mem0-1 target direction
;;mem2 size defense
;;mem3 stuck?
;;mem 4 number
;;mem 5 target?
;;
;; Harvester :
;;mem0-1 target direction
;;mem2 size defense
;;mem3 stuck?     // if mem4 = 1 ou 0 : timer
;;mem 4 hervester_type : 0 farmer; 1 seeker; 2 harbinger
;;mem 5 target?
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;base 
;;mem0: Total of unity number
;;mem1: size of circle crop
;;mem2: seeker number
;;mem3: farmer number
;;mem4: harbinger?
;;;;;;;;;;;;;;;;;;;;;;;;;
;;Explorer stomper
;; mem2 next base to destroy
;Ask close rocket launcher to get in circle around target
to come_circle_this [ t radius numberTotal currentTotal general ]
  ;Si on est pas en train de faire quelque chose
  if ( mem5 = 0 and breed = 2 )
  [
    let posX ( radius * cos(360 * currentTotal / numberTotal)  + [xcor] of t )
    let posY ( radius * sin(360 * currentTotal / numberTotal) + [ycor] of t )
    set mem0 posX 
    set mem1 posY
    set mem5 1
    move-to-target-and-stay
    
  ]
 
end
to come_circle_thisxy [ aimX aimY radius numberTotal currentTotal general ]
  ;Si on est pas en train de faire quelque chose
  ;;if ( mem5 = 0);; and breed = 2 )
  ;;[
   ; show radius
    let posX ( radius * cos(360 * (currentTotal / numberTotal) + 360 * ((ticks mod 500) / 500) ) + aimX )
    let posY ( radius * sin(360 * (currentTotal / numberTotal) + 360 * ((ticks mod 500) / 500) ) + aimY )
    ;show posX
    ;show posY
    set mem0 posX 
    set mem1 posY
    set mem5 1
    move-to-target-and-stay
    
  ;;]
 
end
to move-to-target  
  if (distancexy mem0 mem1 < 1 )
  [
    set mem5 0
  ]
set heading towardsxy mem0 mem1
       ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
        
        
end
to move-to-target-and-stay

  set heading towardsxy mem0 mem1
       ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
        
end

to red-team-ask-for-energy [ b n ]
  ask b [ if (energy > 6000) [ give-energy myself n ]]
end
to red-team-go-back-to-base-cardinal
 
  if ( carrying-food? > 2000 or energy < 500 )
  [
   
    let b min-one-of my-bases [ distance myself ]
    ifelse (b != nobody and mem3 = 0) [
      ifelse (distance b <= 2)
      [ 
        if (carrying-food? > 2000) [ give-food b (carrying-food? / 2) ]
        if (energy < 500) [ red-team-ask-for-energy b 500 ]
        if ((Breed = RocketLaunchers) and (nb-missiles = 0)) [
          red-team-ask-for-energy b 500
          new-missile 5
        ]
      ]
      [
      ;;si on est a l'intérieur
;;      if(distance b < mem2)
  ;;    [  set heading towards b - 20 + random 40
    ;;    ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]
     ;; ]
      ifelse(abs(xcor - [xcor] of b) < abs(ycor - [ycor] of b))
        ;;On s'approche par l'axe x
        [
          if(xcor > [xcor] of b + 0.5 )
         [ ;;xcor plus grand, on descent
          set heading 270
          ]
          if(xcor < [xcor] of b - 0.5 )
         [ ;;xcor plus petit, on monte
          set heading 90
          ]
          if(xcor < [xcor] of b + 0.5 and xcor > [xcor] of b - 0.5 )
         [ ;;xcor egal, on va vers
          
          set heading towards b
          ]
          
          ]
        ;;On s'approche par l'axe y
        [
          if(ycor > [ycor] of b + 0.5)
         [ ;;ycor plus grand, on va a gauche
          set heading 180
          ]
          if(ycor < [ycor] of b - 0.5 )
         [ ;;ycor plus petit, on monte
          set heading 0
          ]
         if(ycor < [ycor] of b + 0.5 and ycor > [ycor] of b - 0.5 )
         [ ;;ycor egal, on va vers
          set heading towards b
         
          ]
          
        ]
        ifelse (free-ahead? speed = nobody) [ forward-move speed
          set mem3 0 ][ rt 90 ifelse (free-ahead? 2 = nobody) [ forward-move speed ] [set mem3 ticks ] ]
      ]
    ]
   [ red-team-go-back-to-base
    ]    
  ]

end

to red-team-go-back-to-base
  if (carrying-food? > 2000 or (energy < 500))
  [
    let b min-one-of my-bases [ distance myself ]
    if (b != nobody) [
      ifelse (distance b <= 2)
      [ 
        if (carrying-food? > 1000) [ give-food b carrying-food? ]
        if (energy < 500) [ red-team-ask-for-energy b 500 ]
        if ((Breed = RocketLaunchers) and (nb-missiles = 0)) [
          red-team-ask-for-energy b 500
          new-missile 5
        ]
        ;;On est arrivé, on est pas stuck
      set mem3 0
      ]
      [
        set heading towards b - 20 + random 40
        ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
      ;;On est probablement débloqué en 50 ticks
        if(ticks - mem3 > 50 )
        [ set mem3 0
        ]
      ]
    ]    
  ]
end
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;; ECONOMY ;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lets plant a seed and harvest a big biggy burger with steak, sald, two portions of cheese and a little gherkin. But just one gherkin.
to reaper-seeker-harvester
  circle-base-with-stone
  let b min-one-of perceive-food [ distance myself ]
  let ba min-one-of my-bases [ distance myself ]
  ;; si tu as de la bouffe à côté de toi : eat all burgers
  ifelse ((b != nobody) and (distance ba > mem2) )
  [
    ifelse (distance b) <= 2
      [ take b ]
      [ set heading towards b - 20 + random 40
      ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
        ]
  ]
  ;; sinon 
  [
   ifelse ( carrying-food? > 0 )
    [set mem3 (mem3 + 1)
      reaper-move-randomly-within-base-range]
    [set mem3 (0)
    ;get-out
    ]
    
    if(mem3 > 400)
    [
      
      red-team-go-back-to-base
      if(distance ba < 2)
      [
        show "grandit stp"
        ask ba [reaper-augment-range]
        set mem3 0
      ]
    ]
    
        ;; si le robot est à moins de 10 de la base
        if ((distance ba < mem2) and ( ycor < [ycor] of ba - 0.5 OR
          ycor > [ycor] of ba + 0.5 ) and ( xcor < [xcor] of ba - 0.5 OR
          xcor > [xcor] of ba + 0.5 )
          )
          [ plant-seeds color max-seeds ]
      
    
    ;; si non cherche co****** et reviens quand tu auras quelquechose à proposer
    ifelse( mem5 = 1)[ move-to-target ][ random-move ]
  ]
end
to get-out
  let ba min-one-of my-bases [ distance myself ]
  
  ifelse( ycor > [ycor] of ba + 0.5)
  [
    set heading 270
  ]
  [
    ifelse( ycor < [ycor] of ba - 0.5)
    [
      set heading 90
    ]
    [    
      ifelse( xcor < [xcor] of ba)
      [
        set heading 180
      ]
      [
        set heading 0
      ]
    ]
  ]
   ifelse (free-ahead? speed = nobody) [ forward-move speed ]
  [   set mem0 ([xcor] of ba + mem2) 
    set mem1  ([ycor] of ba)
    set mem5 1 
    move-to-target
  ]
  
  
end

to reaper-seeker-eat-all-burgers
  let t min-one-of perceive-seeds ennemy1 [distance myself]
  if(t != nobody)
  [
  set heading towards t  - 20 + random 40
  ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
  ]
end


;;;Method to reap the whole game
to harbringer
      let c min-one-of perceive-base ennemy1 [ distance myself ]
  if (c != nobody)[
    ifelse (distance c) <= 2
      [ take c ;;DAFUQ Can take wall as energy
     ; drop-wall 
      ]
      [ set heading towards c - 20 + random 40
      ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
        ]
  ]
    set c min-one-of perceive-base ennemy2 [ distance myself ]
  if (c != nobody)[
    ifelse (distance c) <= 2
      [ take c ;;DAFUQ Can take wall as energy
     ; drop-wall 
      ]
      [ set heading towards c - 20 + random 40
      ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
        ]
  ]
   set c min-one-of perceive-robots ennemy2 [ distance myself ]
  if (c != nobody)[
    ifelse (distance c) <= 2
      [ take c ;;DAFUQ Can take wall as energy
     ; drop-wall 
      ]
      [ set heading towards c - 20 + random 40
      ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
        ]
  ]
    set c min-one-of perceive-robots ennemy1 [ distance myself ]
  if (c != nobody)[
    ifelse (distance c) <= 2
      [ take c ;;DAFUQ Can take wall as energy
     ; drop-wall 
      ]
      [ set heading towards c - 20 + random 40
      ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
        ]
  ]

   set c min-one-of perceive-walls [ distance myself ]
  if (c != nobody)[
    ifelse (distance c) <= 2
      [ take c ;;DAFUQ Can take wall as energy
     ; drop-wall 
      ]
      [ set heading towards c - 20 + random 40
      ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
        ]
  ]
  
     set c min-one-of perceive-food [ distance myself ]
  if (c != nobody)[
    ifelse (distance c) <= 2
      [ take c ;;DAFUQ Can take wall as energy
     ; drop-wall 
      ]
      [ set heading towards c - 20 + random 40
      ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
        ]
  ]
   set c min-one-of perceive-missile [ distance myself ]
  if (c != nobody)[
    ifelse (distance c) <= 2
      [ take c ;;DAFUQ Can take wall as energy
     ; drop-wall 
      ]
      [ set heading towards c - 20 + random 40
      ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
        ]
  ]
   
  
end

to red-team-go-and-eat
  if ((breed = RocketLaunchers and (mem5 = 0)) or (breed = Explorers)) [
    random-move
  ]
end

  
  to burger-collector-harvesters
;  let b min-one-of perceive-base ennemy1 [distance myself]
 ; let b min-one-of perceive-robots2 ennemy1 ennemy2 [ distance myself ]
  circle-base-with-stone
  let ba min-one-of my-bases [ distance myself ]
  ifelse ( carrying-food? > 0 )
    [set mem3 (mem3 + 1)
    ]
    [set mem3 (0)]
    
    if(mem3 > 400)
    [
      red-team-go-back-to-base
      if(distance ba < 2)
      [
        show "grandit stp"
        ask ba [reaper-augment-range]
        set mem3 0
      ]
    ]
  
  if (carrying-food? > 2000)
  [ red-team-go-back-to-base]
  let b min-one-of perceive-food [ distance myself ]
  if (b != nobody) [ 
    ifelse (distance b) <= 2
      [ take b ]
      [ set heading towards b - 20 + random 40
      ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
        ]
  ]
  
  ifelse( mem5 = 1)[ move-to-target ]
  [ 
    ifelse(mem4 = 0) ;;Je suis un farmer, je reste dans la base
    [ 
       
      reaper-move-randomly-within-base-range
        if ((distance ba < mem2) and ( ycor < [ycor] of ba - 0.5 OR
          ycor > [ycor] of ba + 0.5 ) and ( xcor < [xcor] of ba - 0.5 OR
          xcor > [xcor] of ba + 0.5 )
          )
          [ plant-seeds color max-seeds ]
    ]
    [random-move];;Sinon move aléatoire
    ]
end

to reaper-move-randomly-within-base-range
  
    let closestBase min-one-of my-bases [ distance myself ] 
      let distbase distance closestBase 
      ifelse (distBase > mem2 );;Si on s'est trop éloingé de la base on essaie de rentrer un peu
    [ set heading towards closestBase - 20 + random 40
      ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
        ]
    [ random-move
      ]
  
end

to circle-base-with-stone
  let closestBase min-one-of my-bases [ distance myself] 
  
  let c min-one-of perceive-walls [ distance myself ]
  if (c != nobody and closestBase != nobody)[
  let distBaseWall [distance c] of closestBase
  ;;on prend a l'intérieur du cercle , a l'extérieur, et au points cardinaux
  if(carrying-wall? = 0 and distBaseWall > mem2 + 1 or distBaseWall < mem2 - 1
     or (xcor <= [xcor + 1] of closestBase and xcor >= [xcor - 1] of closestBase ) 
    or (ycor <= [ycor + 1] of closestBase and ycor >= [ycor - 1] of closestBase ) ) [ 
    ifelse (distance c) <= 2
      [ take-wall c ;;DAFUQ Can take wall as energy
     ; drop-wall 
      ]
      [ set heading towards c - 20 + random 40
      ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
        ]
  ]
  ]
  ;;Disposition en cercle évidé
  if( closestBase != nobody and carrying-wall? = 1 and distance closestBase > mem2 - 1 and distance closestBase < mem2 + 1 
    and (xcor >= [xcor + 1] of closestBase or xcor <= [xcor - 1] of closestBase ) 
    and (ycor >= [ycor + 1] of closestBase or ycor <= [ycor - 1] of closestBase ))
  [
    drop-wall
  ]
end

to red-team-harvesters-go-and-eat
  burger-collector-harvesters
  
end

to-report red-team-no-target?
  report mem5 = 0
end

to red-team-set-target [ x y espece ]
  set mem0 x set mem1 y set mem2 espece set mem5 1
end

to red-team-call-rocket-launcher [ x y espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distancexy x y ]
  if (rl != nobody) [ ask rl [ red-team-set-target x y espece ]]
end

to red-team-call-explorer [ x y espece ]
  let ex one-of perceive-specific-robots color Explorers
  if (ex != nobody) [
    ask ex [
      set mem0 x 
      set mem1 y
      set mem2 espece
      set mem5 1
    ]
  ]
end

to red-team-select-target
  if (red-team-no-target?)
  [
    let h min-one-of perceive-robots2 ennemy1 ennemy2 [ distance myself ]
    ifelse ( h != nobody ) [
      set mem0 [xcor] of h
      set mem1 [ycor] of h
      set mem2 [breed] of h
      set mem5 1
    ]
    [ set mem5 0 ]
  ]
end

to red-team-shoot 
  if (not red-team-no-target?) 
  [
    ifelse (distancexy mem0 mem1 < detection-range)
    [ launch-rocket towardsxy mem0 mem1 set mem5 0]
    [ set heading towardsxy mem0 mem1 - 20 + random 40
      if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
      forward-move speed
    ]
  ]
  
end

to goRedExplorer
  red-team-go-back-to-base
  stomp-ennemy-fields
  ;;  red-team-go-and-eat

  ;;ifelse (not red-team-no-target?) [
    ;;red-team-call-rocket-launcher mem0 mem1 mem2
    ;red-team-call-explorer mem0 mem1 mem2
  ;]
  ;[ let h one-of perceive-robots2 ennemy1 ennemy2
   ; if ( h != nobody ) [ red-team-call-rocket-launcher [xcor] of h [ycor] of h [breed] of h]
  ;]
end

to goRedRocketLauncher
  red-team-go-back-to-base
  red-team-select-target
  red-team-shoot
  red-team-go-and-eat

  if ((energy > 3000) and (nb-missiles < 5)) [ new-missile 1 ]
end
to stomp-ennemy-fields
  
  let t min-one-of perceive-seeds ennemy1 [distance myself]
  if(t != nobody)
  [
  set heading towards t  - 20 + random 40
  ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
  ]
  set t min-one-of perceive-seeds ennemy2 [distance myself]
  if(t != nobody)
  [
  set heading towards t  - 20 + random 40
  ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
  ]
  
      move-to-target
  
end
;;Mouvement carré droite up left down. A lancer depuis un pose bas
 to make-square-base
  set mem3 ((mem3 + 1) mod 4)
  set mem5 1
  if(mem3 = 0) ;; droite up left down
    [
     set mem0 mem0 + 40
      ]
      if(mem3 = 1) ;; droite up left down
      [
       set mem1 mem1 + 20
      ]
      if(mem3 = 2) ;; droite up left down
      [
        set mem0 mem0 - 40
      ]
      if(mem3 = 3) ;; droite up left down
      [
        set mem1 mem1 - 20
      ]

end
    
to-report perceive-missile
  report turtles in-radius detection-range with [ (breed = Missiles) or (breed = Fafs)]
end
  

to goRedHarvester
  ;; rentre à la base si certaines conditions sont vérifiées
  if(mem4 = 2 ) ;;harbringer
  [
    ifelse(mem5 = 0)
  [
  random-move
  ]
  [
    move-to-target
  ]
  ]
  
  let frobots perceive-specific-robots color Harvesters 
  let base-near min-one-of perceive-base color [distance myself] 
  
  let max-range mem2
  
  
  if (frobots != nobody)
  [
    ;show [mem2] of (max-one-of frobots [mem2])
    set mem2 ( [mem2] of (max-one-of frobots [mem2]) )
  ]
  if (base-near != nobody)
  [
    ;show base-near
    if([mem1] of base-near > mem2)
    [
      set mem2 ([mem1] of base-near)
      show "BASE PLUS GRANDE"
  ]
  ]
  
  ;; red-team-go-back-to-base-cardinal
  ;; cherche à manger
 ;;  red-team-harvesters-go-and-eat
 if( mem4 = 1)
  [reaper-seeker-harvester]
 
  if (mem4 = 0)
  [burger-collector-harvesters]
 ;; come_circle_thisxy -40 10 10 25 mem4 nobody 

end

to goRedBase
  set label energy
  if (energy > 12000) 
  [

  new-Harvester 1 self
 
  ]
  let t one-of perceive-specific-robots2 ennemy1 ennemy2 rocketlaunchers
  if (t != nobody) [
   ;; new-faf 1
    launch-faf t
  ]
  
  if (ticks = 2000 OR ticks = 4000 OR ticks = 6000 OR ticks = 8000)
  [ 
    set mem2 0
    set mem3 0
  ]
  
end

;; procedure pour initialiser les explorers rouges
to initRedExplorer
  set mem0 (xcor - 40)
  set mem1 ycor
  set mem3 3
  set mem5 1
end
to create-wall
   new-wall 1 myself
end
;; procedure pour initialiser les rocket-launchers rouges
to initRedRocketLauncher
  let b min-one-of my-bases [distance self] 
   set mem4 [ mem0 + 1 ] of b
  ask b [increment-total]  
end
to increment-total
  set mem0 (mem0 + 1)
end
to reaper-increment-seeker-total
  set mem2 (mem2 + 1)
end
to reaper-increment-farmer-total
  set mem3 (mem3 + 1)
end
to reaper-augment-range
  set mem1 (mem1 + 3)
  show "OUI OUI OUI"
  show mem1
end
;; procedure pour initialiser les harvesters rouges
to initRedHarvester
  set mem2 10;
  let b min-one-of my-bases [distance self] 
  
  let x ([mem4] of b)
  
  ifelse( x != 0)
  [ 
    set mem4 2
  ]
  [
    show "mem3"
    show [mem2] of b
    show "mem4"    
    show [mem3] of b
  ]
       
 carefully[
      if( ticks < 2000  )
      [
    ifelse([mem2] of b >  [mem3] of b)
    [ 
      show "je suis un farmer, je m'apelle Mylenn"
      set mem4 0
      ask b [reaper-increment-farmer-total]]
     
    [ set mem4 1
      ask b [reaper-increment-seeker-total]]
    ]][]
  carefully[
      if( ticks > 2000 AND ticks < 6000 )
      [
    ifelse([mem2] of b >  [mem3] of b)
    [ 
      show "je suis un farmer, je m'apelle Mylenn"
      set mem4 0
      ask b [reaper-increment-farmer-total]
        ask b [create-wall]
      ]
    [ set mem4 1
      ask b [reaper-increment-seeker-total]]
    ]][]
    carefully[
      if( ticks > 6000 AND ticks < 8000 )
    [
    ifelse(3 * [mem2] of b >  [mem3] of b)
    [ 
      show "je suis un farmer, je m'apelle Mylenn"
      set mem4 0
      ask b [reaper-increment-farmer-total]
        ask b [create-wall]
      ]
    [ set mem4 1
      ask b [reaper-increment-seeker-total]]
  ]][]
    carefully[
      if( ticks > 8000 )
    [
    ifelse( 20 * [mem2] of b >  [mem3] of b)
    [ 
      show "je suis un farmer, je m'apelle Mylenn"
      set mem4 0
      ask b [reaper-increment-farmer-total]
        ask b [create-wall]
      ]
    [ set mem4 1
      ask b [reaper-increment-seeker-total]]
  ]][]
  
  
  

  
  
  
  
 
  ;============Harbinger mode=================
  if(mem4 = 2)
  [
  let r random 2
  ifelse(r = 1)
  [
  set mem0 xcor - 40
  ]
  [
    set mem0 xcor + 40
  ]
  set mem1 ycor 
  set mem5 1
  set mem3 0
  ]
  


;;==========================================  
  ;carefully[
 ; if( ticks > 3000)[ set mem0 xcor - 40
; set mem1 ycor 
;set mem5 1
;  set mem3 0
 
   ; ]
 ; ][;;die silently
 ; ]
end

;; procedure pour initialiser les bases rouges
to initRedBase
  set mem0 0
  set mem1 10
  set mem2 0
  set mem3 0
  new-Explorer 1 self

  new-Harvester 7 self
  
  ;;new-RocketLauncher 2 self
end
